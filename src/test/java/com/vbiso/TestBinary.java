package com.vbiso;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import org.junit.Test;

/**
 * @Author: wenliujie
 * @Description:
 * @Date: Created in 4:49 PM 2018/12/23
 * @Modified By:
 */
public class TestBinary {

  @Test
  public void test() {
    //先定义 length =4;
    int length = 4;

    //header length 假设为8
    length += 8;

    //body length 假设为16
    length += 16;
    //总的length length+
    length += (4 - 16);
    System.out.println((318 >> 16) & 0xFF);
    System.out.println((318 >> 8) & 0xFF);
    System.out.println(318 & 0xFF);
    System.out.println();
    byte a = 4;
    System.out.println((char) a);
  }

  @Test
  public void testBinary() {
    long USER_TAG_HAS_VERIFY_MOBILE = 1L << 48L;
    long isTry = 1L << 48L;
    long tagBit = 1420569044060160L;

    long userTag = 1420569044060160L;

    long userTagUnset = userTag & (~isTry);
    System.out.println(userTagUnset + "====");

    System.out.println((userTag | isTry) + "========");

    System.out.println(((userTag) & (~isTry)));

    long userTag2 = tagBit & (~USER_TAG_HAS_VERIFY_MOBILE);
    System.out.println(USER_TAG_HAS_VERIFY_MOBILE == (userTag & USER_TAG_HAS_VERIFY_MOBILE));
    System.out.println(userTag);
    System.out.println(tagBit & (~USER_TAG_HAS_VERIFY_MOBILE));
    //System.out.println((tagBit&(~USER_TAG_HAS_VERIFY_MOBILE))|USER_TAG_HAS_VERIFY_MOBILE==);
  }

  @Test
  public void testDouble() {
    double a = 1.245;
    BigDecimal bigDecimal = new BigDecimal(a);
    double v = bigDecimal.setScale(2, BigDecimal.ROUND_CEILING).doubleValue();
    System.out.println(v);
    double floor = Math.floor(1.2);
    System.out.println(floor);
    double ceil = Math.ceil(1.2);
    System.out.println(ceil);
  }

  @Test
  public void testSplit() {
    String test = "2113790535,2576189099,835026114,303566060,2219387890,358164451,450969373,2177009988,3299066796,2968292908,1848219836,2614008534,1808945499,770622025,2174360244,2354641172,2119678292,274181551,2081058060,2298471098,797567822,2179896756,285940116,1620343221,2452347015,1710310361,1791703401,734548981,1712484042,758299113,3037963981,2098904675,1692267959,820353206,200906269,1623755810,1650429497,108727117,1107209550,379752451,2794890945,2660143464,699724610,2451193866,43290044,772376192,704298669,690444147,773592828,3309612210,2075384612,2032840798,1720131773,1690425481,2217145602,2995821815,752440565,1983221995,474461573,1052501866,2253486272,1812648039,2457813340,2098914042,2482635690,436282312,779266623,743491614,806799685,2877706782,2265599537,1102315914,18520876762,87578096,3085429505,357031128,1872340602,13626568,2561855019,163613819,2863359127,1873220527,1832738091,2765322692,2550592806,2662673928,4075533129,1746354587,3436533774,137999689,3599678600,3698120262,4163194675,508215524,4106327825,2456352427,18103702,2922587332,12028739,3200313398,279512537,2078754326,3083793236,2072004631,4093779675,44674038,2078754326,3083793236,2072004631,4093779675,44674038,3329219734,3821475377,3994652824,3329219734,527702517,3421570100,3083639051,2570569779,1700259263,2636016065,2182574435,496068508";

    AtomicInteger i = new AtomicInteger();
    Arrays.stream(test.split(",")).filter(str -> {
      if (i.get() > 60) {
        return true;
      } else {
        i.incrementAndGet();
        return false;
      }
    }).forEach(str -> {

      System.out.printf("%s,", str);
    });
    System.out.println(i.get());

    System.out.println(
        "2113790535,2576189099,835026114,303566060,2219387890,358164451,450969373,2177009988,3299066796,2968292908,1848219836,2614008534,1808945499,770622025,2174360244,2354641172,2119678292,274181551,2081058060,2298471098,797567822,2179896756,285940116,1620343221,2452347015,1710310361,1791703401,734548981,1712484042,758299113,3037963981,2098904675,1692267959,820353206,200906269,1623755810,1650429497,108727117,1107209550,379752451,2794890945,2660143464,699724610,2451193866,43290044,772376192,704298669,690444147,773592828,3309612210,2075384612,2032840798,1720131773,1690425481,2217145602,2995821815,752440565,1983221995,474461573,1052501866"
            .split(",").length);

  }

  @Test
  public void testLength(){
    String str = "【yaoyantest】老朋友还记得去年春天您与我的那场约会吗，一周年到了，今年優惠尤其大，滿減優惠哲上哲、特價秒殺零点抢、快来看看吧！回T退订";
    System.out.println(str.length());
  }

  @Test
  public void testContains(){
    String uids = "1645715017,1728637953,2429050965,100020780,10536899,3587929269,2831510579,98998902,274181551,1602099579,138468814,749599458";

    List<String> collect = Arrays.stream(uids.split(",")).collect(Collectors.toList());

    String sIds="152741566,1052162151,2658963920,53996004,1680165824,193502143,467581594,2826236373,1114645587,73949549,2469562247,2935704281,3409587831,2177009988,384701816,1777559618,731540192,1644258287,258864658,1879192469,850298692,2077676622,2527740099,436289756,738273224,1071824174,2380416887,2540423819,1635311200,1642903049,523839324,143584903,1677293958,2453841799,1045145001,1701810356,822748943,420284856,2038190286,1758991051,833261111,3079643236,1579940938,361228028,552884052,21659330,3338963428,2591319573,1722005085,1589554218,2013902750,52371042,1094711476,1714421245,667772824,2096832371,57526744,667066596,885839988,2630993141,239627417,1035301420,2362811866,1650438331,779529792,843386707,262659183,50454948,151940621,1077979376,116043003,817767474,1845689476,2398329469,2418706604,2176320598,712110029,1755612437,2999185394,470733039,2682768161,65386645,53790258,327671008,28329090,2969638649,2292343011,715463997,3386085948,2168800166,2082410464,2961798612,2916264679,1123740951,474359666,2191707152,61169695,701751992,3370050028,2127130225,2069568072,70239350,2107759029,765391429,1737955717,1095251662,1710482305,479287798,2090170274,2772080898,1055530397,1744921231,20003478,2612002833,2335305051,1019292692,1773095659,20868741,2057428013,196173223,1602099579,2379788782,381329993,71460541,1810832479,2638829335,355499374,2830047887,193502143,2974167399,2448802922,2643486953,1061690320,2159616682,729434847,2262500569,913217145,101450072,43632109,2113790535,2576189099,835026114,303566060,2219387890,358164451,450969373,2177009988,3299066796,2968292908,1848219836,2614008534,1808945499,770622025,2174360244,2354641172,2119678292,274181551,2081058060,2298471098,797567822,2179896756,285940116,1620343221,2452347015,1710310361,1791703401,734548981,1712484042,758299113,3037963981,2098904675,1692267959,820353206,200906269,1623755810,1650429497,108727117,1107209550,379752451,2794890945,2660143464,699724610,2451193866,43290044,772376192,704298669,690444147,773592828,3309612210,2075384612,2032840798,1720131773,1690425481,2217145602,2995821815,752440565,1983221995,474461573,1052501866,2253486272,1812648039,2457813340,2098914042,2482635690,436282312,779266623,743491614,806799685,2877706782,2265599537,1102315914,18520876762,87578096,3085429505,357031128,1872340602,13626568,2561855019,163613819,2863359127,1873220527,1832738091,2765322692,2550592806,2662673928,4075533129,1746354587,3436533774,137999689,3599678600,3698120262,4163194675,508215524,4106327825,2456352427,18103702,2922587332,12028739,3200313398,279512537,2078754326,3083793236,2072004631,4093779675,44674038,2078754326,3083793236,2072004631,4093779675,44674038,3329219734,3821475377,3994652824,3329219734,527702517,3421570100,3083639051,2570569779,1700259263,2636016065,2182574435,496068508,157457726,2200573698992,1108132952,3407847641,1018189635";
    List<String> collect1 = Arrays.stream(sIds.split(",")).collect(Collectors.toList());
    for(String str : collect){
      if (!collect1.contains(str)) {
        System.out.println(str);
      }
    }
  }

}
